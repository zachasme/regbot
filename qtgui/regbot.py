#!/usr/bin/python
# -*- coding: utf-8 -*-

#/***************************************************************************
 #*   Copyright (C) 2016 by DTU                             *
 #*   jca@elektro.dtu.dk        aa                                       aa   *
 #*
 #* Main REGBOT client code
 #* setup of main window and reactions to all GUI events
 #*
 #*   This program is free software; you can redistribute it and/or modify  *
 #*   it under the terms of the GNU General Public License as published by  *
 #*   the Free Software Foundation; either version 2 of the License, or     *
 #*   (at your option) any later version.                                   *
 #*                                                                         *
 #*   This program is distributed in the hope that it will be useful,       *
 #*   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 #*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 #*   GNU General Public License for more details.                          *
 #*                                                                         *
 #*   You should have received a copy of the GNU General Public License     *
 #*   along with this program; if not, write to the                         *
 #*   Free Software Foundation, Inc.,                                       *
 #*   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 #***************************************************************************/

# "$Rev: 499 $"
#CLIENT_REV = "$Id: regbot.py 499 2016-12-02 07:52:07Z jcan $"

import sys
import os
#from PyQt4 import QtGui, QtCore, Qt
from pyqtgraph.Qt import QtGui, QtCore
#from PyQt5.QtWidgets import *
#from PyQt5.QtGui import *
#import serial
#import thread
import threading
import time
import string
import random
import math
#import socket
#from time import sleep
#from fcntl import fcntl, F_GETFL, F_SETFL
#from os import O_NONBLOCK, read
import pyqtgraph as pg
import numpy as np
from pyqtgraph.dockarea import *

# autogenerated by: pyuic4 regbot.ui -o regbotdesign.py
from regbotdesign import Ui_regbot
#from uirdistance import UIRDistance
from ulog import ULog
from uimu import UImu
from umission import UMission, UMissionLine
from uinfo import UInfo
from ulinesensor import ULineSensor
from uirsensor import UIRDistance
from urobot import URobot

from upaintsupport import *

   

#class UMainWindow(QtGui.QMainWindow):
class UMainWindow(QtGui.QMainWindow):
  def __init__(self, parent = None):
    #self.robot = None
    self.ui = Ui_regbot()
    self.robot = URobot(self, self.ui)
    QtGui.QWidget.__init__(self, parent)
    self.robot.init()
    #self.ui = Ui_regbot()
    self.ui.setupUi(self)
    self.robot.configurationFileLoadDef(True)
    self.robot.imu.initGraph()
    self.robot.drive.initGraph()
    #QDialog.__init__(self, parent)
    #print("starting ...")
    self.timer = QtCore.QTimer(self)
    #self.timer = QTimer(self)
    self.timer.timeout.connect(self.robot.timerUpdate)
    self.ui.statusbar.showMessage("Robot client starting ...", 6000)
    # add usb connection frame
    self.usb_paint_space = UsbPaintSpace(self.ui.frame_usb_connect, self.robot)
    self.usb_paint_space.setGeometry(QtCore.QRect(0, 0, 350, 100))
    self.usb_paint_space.setFocusPolicy(QtCore.Qt.NoFocus)
    self.usb_paint_space.lower()
    #self.usb_paint_space.setUI(self.ui)
    # paint wifi connection frame
    self.wifi_paint_space = WifiPaintSpace(self.ui.frame_wifi_connect, self.robot)
    self.wifi_paint_space.setGeometry(QtCore.QRect(0, 0, 350, 100))
    self.wifi_paint_space.setFocusPolicy(QtCore.Qt.NoFocus)
    self.wifi_paint_space.lower()
    # paint wifi connection frame
    self.ctrl_paint_space = ControlPaintSpace(self.ui.frame_ctrl, self.robot)
    self.ctrl_paint_space.setGeometry(QtCore.QRect(0, 0, 600, 600))
    self.ctrl_paint_space.setFocusPolicy(QtCore.Qt.NoFocus)
    self.ctrl_paint_space.lower()
    ## wall follow
    #self.wall_paint_space = PaintWallSpace(self.ui.wall_control_frame, self.robot)
    #self.wall_paint_space.setGeometry(QtCore.QRect(0, 0, 680, 520))
    #self.wall_paint_space.setFocusPolicy(QtCore.Qt.NoFocus)
    #self.wall_paint_space.lower()
    # self.turn_paint_space.setFocusProxy(self.ui.turn_regul_frame)
    # paint background lightGray
    p = self.ui.centralwidget.palette()
    p.setColor(self.ui.centralwidget.backgroundRole(), QtCore.Qt.lightGray)
    self.ui.centralwidget.setPalette(p)
    self.ui.centralwidget.setAutoFillBackground(True)
    #
    p = self.ui.main.palette() # main
    p.setColor(self.ui.main.backgroundRole(), QtCore.Qt.lightGray)
    self.ui.main.setPalette(p)
    self.ui.main.setAutoFillBackground(True)
    #
    p = self.ui.tab.palette() # log
    p.setColor(self.ui.tab.backgroundRole(), QtCore.Qt.lightGray)
    self.ui.tab.setPalette(p)
    self.ui.tab.setAutoFillBackground(True)
    #
    p = self.ui.tab_2.palette() # robot
    p.setColor(self.ui.tab_2.backgroundRole(), QtCore.Qt.lightGray)
    self.ui.tab_2.setPalette(p)
    self.ui.tab_2.setAutoFillBackground(True)
    #
    p = self.ui.tab_3.palette() # IMU
    p.setColor(self.ui.tab_3.backgroundRole(), QtCore.Qt.lightGray)
    self.ui.tab_3.setPalette(p)
    self.ui.tab_3.setAutoFillBackground(True)
    #
    p = self.ui.tab_6.palette() # mission
    p.setColor(self.ui.tab_6.backgroundRole(), QtCore.Qt.lightGray)
    self.ui.tab_6.setPalette(p)
    self.ui.tab_6.setAutoFillBackground(True)
    #
    p = self.ui.tab_control.palette()
    p.setColor(self.ui.tab_control.backgroundRole(), QtCore.Qt.lightGray)
    self.ui.tab_control.setPalette(p)
    self.ui.tab_control.setAutoFillBackground(True)
    #
    #p = self.ui.tab_9.palette()
    #p.setColor(self.ui.tab_9.backgroundRole(), QtCore.Qt.lightGray)
    #self.ui.tab_9.setPalette(p)
    #self.ui.tab_9.setAutoFillBackground(True)
    #
    p = self.ui.tab_10.palette() # Edge tab
    p.setColor(self.ui.tab_10.backgroundRole(), QtCore.Qt.lightGray)
    self.ui.tab_10.setPalette(p)
    self.ui.tab_10.setAutoFillBackground(True)
    #
    p = self.ui.tab_11.palette() # IR distance
    p.setColor(self.ui.tab_11.backgroundRole(), QtCore.Qt.lightGray)
    self.ui.tab_11.setPalette(p)
    self.ui.tab_11.setAutoFillBackground(True)
    #
    #p = self.ui.reg_vel_frame.palette()
    #p.setColor(self.ui.reg_vel_frame.backgroundRole(), QtCore.Qt.lightGray)
    #self.ui.reg_vel_frame.setPalette(p)
    #self.ui.reg_vel_frame.setAutoFillBackground(True)
    #
    p = self.ui.log_options.palette()
    p.setColor(self.ui.log_options.backgroundRole(), QtCore.Qt.lightGray)
    self.ui.log_options.setPalette(p)
    self.ui.log_options.setAutoFillBackground(True)
    #
    p = self.ui.frame_5.palette()
    p.setColor(self.ui.frame_5.backgroundRole(), QtCore.Qt.lightGray)
    self.ui.frame_5.setPalette(p)
    self.ui.frame_5.setAutoFillBackground(True)
    #
    p = self.ui.frame_12.palette()
    p.setColor(self.ui.frame_12.backgroundRole(), QtCore.Qt.lightGray)
    self.ui.frame_12.setPalette(p)
    self.ui.frame_12.setAutoFillBackground(True)
    #
    p = self.ui.frame_8.palette()
    p.setColor(self.ui.frame_8.backgroundRole(), QtCore.Qt.lightGray)
    self.ui.frame_8.setPalette(p)
    self.ui.frame_8.setAutoFillBackground(True)
    #
    p = self.ui.frame_3.palette()
    p.setColor(self.ui.frame_3.backgroundRole(), QtCore.Qt.lightGray)
    self.ui.frame_3.setPalette(p)
    self.ui.frame_3.setAutoFillBackground(True)
    #
    p = self.ui.frame_6.palette()
    p.setColor(self.ui.frame_6.backgroundRole(), QtCore.Qt.lightGray)
    self.ui.frame_6.setPalette(p)
    self.ui.frame_6.setAutoFillBackground(True)
    #
    p = self.ui.frame_9.palette()
    p.setColor(self.ui.frame_9.backgroundRole(), QtCore.Qt.lightGray)
    self.ui.frame_9.setPalette(p)
    self.ui.frame_9.setAutoFillBackground(True)
    #
    p = self.ui.frame_10.palette()
    p.setColor(self.ui.frame_10.backgroundRole(), QtCore.Qt.lightGray)
    self.ui.frame_10.setPalette(p)
    self.ui.frame_10.setAutoFillBackground(True)
    # battery and time frame can be yellow or red
    self.ui.frame_batt_time.setAutoFillBackground(True)
    # set start tab
    self.ui.tabPages.setCurrentIndex(self.getIndex(2))
    # set software version number
    #self.ui.robot_me_version.setText("client sw " + robot.clientVersion())
    self.timer.start(50) # value in ms
    # event connections
    self.ui.main_help.clicked.connect(self.robot.mainSettingHelp)
    self.ui.main_status_clear.clicked.connect(self.robot.mainStatusClear)
    self.ui.main_start.clicked.connect(self.robot.mainSettingStart)
    self.ui.main_stop.clicked.connect(self.robot.mainSettingStop)
    #self.ui.main_status_while_running.stateChanged.connect(self.robot.statusWhileRunning)
    #self.ui.main_start_2.clicked.connect(self.robot.mainSettingStart)
    #self.ui.log_flag_apply.clicked.connect(self.robot.logFlagApply)
    self.ui.tabPages.currentChanged.connect(self.tabPageFocusChanged)
    # menu actions
    self.ui.actionQuit.triggered.connect(self.stop)
    self.ui.actionAbout.triggered.connect(self.menuAbout)
    self.ui.actionDebug.triggered.connect(self.menuShowDebug)
    self.ui.actionWifi.triggered.connect(self.menuShowWiFi)
    self.ui.actionLog.triggered.connect(self.menuShowLog)
    self.ui.actionRobot.triggered.connect(self.menuShowRobot)
    self.ui.actionIMU.triggered.connect(self.menuShowIMU)
    self.ui.actionLine.triggered.connect(self.menuShowLine)
    self.ui.actionDistance.triggered.connect(self.menuShowDist)
    self.ui.actionControl.triggered.connect(self.menuShowControl)
    self.ui.actionMission.triggered.connect(self.menuShowMission)
    self.ui.actionServo.triggered.connect(self.menuShowServo)
    self.ui.actionShow_all.triggered.connect(self.menuShowAll)
    self.ui.actionHide_most.triggered.connect(self.menuHideMost)
    #
    self.ui.connect_usb.clicked.connect(self.robot.connect_usb_changed)
    self.ui.connect_wifi.clicked.connect(self.robot.connect_wifi_changed)
    self.ui.ir_apply.clicked.connect(self.robot.irDist.paramApplyCal) 
    self.ui.ir_cancel.clicked.connect(self.robot.irDist.paramCancelCal)
    self.ui.ir_edit.clicked.connect(self.robot.irDist.dataEditCal)
    self.ui.ir_d1_20cm.valueChanged.connect(self.robot.irDist.dataEditCal)
    self.ui.ir_d1_80cm.valueChanged.connect(self.robot.irDist.dataEditCal)
    self.ui.ir_d2_20cm.valueChanged.connect(self.robot.irDist.dataEditCal)
    self.ui.ir_d2_80cm.valueChanged.connect(self.robot.irDist.dataEditCal)
    self.ui.checkBox_ir_use.clicked.connect(self.robot.irDist.dataEditCal)
    # gyro
    self.ui.imu_gyro_calibrate.clicked.connect(self.robot.doGyroOffset)
    # Edge/line sensor
    self.ui.line_disp_max_value.valueChanged.connect(self.robot.lineSensor.max_value_changed)
    self.ui.ls_use_sensor.clicked.connect(self.robot.lineSensor.setWhiteLine)
    self.ui.ls_line_white.clicked.connect(self.robot.lineSensor.setWhiteLine)
    self.ui.ls_power_auto.clicked.connect(self.robot.lineSensor.setWhiteLine)
    self.ui.ls_power_high.clicked.connect(self.robot.lineSensor.setWhiteLine)
    self.ui.ls_calibrate_white.clicked.connect(self.robot.lineSensor.calibrateWhite)
    self.ui.ls_calibrate_black.clicked.connect(self.robot.lineSensor.calibrateBlack)
    # main status
    self.ui.main_send_cmd.clicked.connect(self.robot.sendCmd)
    # - when return is pressed in line edit
    self.ui.main_send_txt.returnPressed.connect(self.robot.sendCmd)
    self.ui.main_mission_2.valueChanged.connect(self.robot.mission.dataChangedManually)
    self.ui.main_mission_2.valueChanged.connect(self.robot.mainMissionChanged2)
    #self.ui.main_push_interval.valueChanged.connect(self.robot.mainPushInterval)
    #self.ui.main_status_stop.clicked.connect(self.robot.mainStatusStop)
    #self.ui.main_status_start.clicked.connect(self.robot.mainStatusStart)
    # config save/load
    #self.ui.config_file_load.clicked.connect(self.robot.configurationFileLoadDef)
    #self.ui.config_file_save.clicked.connect(self.robot.configurationFileSaveDef)
    self.ui.config_robot_save.clicked.connect(self.robot.configurationRobotSave)
    self.ui.actionLoad_configuration.triggered.connect(self.robot.configurationFileLoadDef)
    #self.ui.actionLoad_configuration_from.triggered.connect(self.robot.configurationFileLoadFrom)
    self.ui.actionSave_configuration.triggered.connect(self.robot.configurationFileSaveDef)
    #self.ui.actionSave_configuration_as.triggered.connect(self.robot.configurationFileSaveAs)
    # robot
    self.ui.robot_pose_reset.clicked.connect(self.robot.robotPoseReset)
    #log 
    self.ui.log_lac.stateChanged.connect(self.robot.setLogFlag_lac)
    self.ui.log_lbt.stateChanged.connect(self.robot.setLogFlag_lbt)
    self.ui.log_line.stateChanged.connect(self.robot.setLogFlag_line)
    self.ui.log_distance.stateChanged.connect(self.robot.setLogFlag_dist)
    self.ui.log_turn_rate.stateChanged.connect(self.robot.setLogFlag_ltr)
    #self.ui.log_lbc.stateChanged.connect(self.robot.setLogFlag_lbc)
    self.ui.log_lct.stateChanged.connect(self.robot.setLogFlag_lct)
    self.ui.log_lgy.stateChanged.connect(self.robot.setLogFlag_lgy)
    self.ui.log_lma.stateChanged.connect(self.robot.setLogFlag_lma)
    self.ui.log_lme.stateChanged.connect(self.robot.setLogFlag_lme)
    self.ui.log_lmr.stateChanged.connect(self.robot.setLogFlag_lmr)
    self.ui.log_lms.stateChanged.connect(self.robot.setLogFlag_lms)
    self.ui.log_lmv.stateChanged.connect(self.robot.setLogFlag_lmv)
    self.ui.log_lvr.stateChanged.connect(self.robot.setLogFlag_lvr)
    self.ui.log_lpo.stateChanged.connect(self.robot.setLogFlag_lpo)
    self.ui.log_lex.stateChanged.connect(self.robot.setLogFlag_lex)
    self.ui.log_turn_rate.stateChanged.connect(self.robot.setLogFlag_ltr)
    self.ui.log_ctrl_vel.stateChanged.connect(self.robot.setLogFlagControl)
    self.ui.log_ctrl_turn.stateChanged.connect(self.robot.setLogFlagControl)
    self.ui.log_ctrl_pos.stateChanged.connect(self.robot.setLogFlagControl)
    self.ui.log_ctrl_edge.stateChanged.connect(self.robot.setLogFlagControl)
    self.ui.log_ctrl_wall.stateChanged.connect(self.robot.setLogFlagControl)
    self.ui.log_ctrl_fwd_dist.stateChanged.connect(self.robot.setLogFlagControl)
    self.ui.log_ctrl_bal.stateChanged.connect(self.robot.setLogFlagControl)
    self.ui.log_ctrl_bal_vel.stateChanged.connect(self.robot.setLogFlagControl)
    self.ui.log_get.clicked.connect(self.robot.logGet)
    self.ui.log_interval.valueChanged.connect(self.robot.setLogInterval)
    #self.ui.log_allow.clicked.connect(self.robot.setLogInterval)
    self.ui.log_get_filename.clicked.connect(self.robot.setLogFileName) 
    self.ui.log_save.clicked.connect(self.robot.logSave)
    self.ui.log_clear.clicked.connect(self.robot.log.logClear)
    # mission
    self.ui.mission_load_from.clicked.connect(self.robot.mission.loadMissionFrom)
    self.ui.mission_save_as.clicked.connect(self.robot.mission.saveMissionAs)
    self.ui.mission_file_save.clicked.connect(self.robot.mission.saveMissionToRegbotMis)
    self.ui.mission_file_load.clicked.connect(self.robot.mission.loadMissionFromRegbotMis)
    self.ui.mission_robot_save.clicked.connect(self.robot.mission.sendToRobot)
    self.ui.mission_syntax_check.clicked.connect(self.robot.mission.checkMission)
    self.ui.mission_robot_load.clicked.connect(self.robot.mission.getFromRobot)
    self.ui.mission_help.clicked.connect(self.robot.mission.helpbox)
    self.ui.button_mission_clear_rx.clicked.connect(self.robot.mission.clearRxField)
    # robot ID etc
    self.ui.robot_wheel_radius_right.valueChanged.connect(self.robot.info.dataChangedManually)
    self.ui.robot_edit.clicked.connect(self.robot.info.dataChangedManually)
    self.ui.robot_cancel.clicked.connect(self.robot.info.cancelEdit)
    self.ui.robot_wheel_radius_left.valueChanged.connect(self.robot.info.dataChangedManually)
    self.ui.robot_pulse_per_rev.valueChanged.connect(self.robot.info.dataChangedManually)
    self.ui.robot_gear.valueChanged.connect(self.robot.info.dataChangedManually)
    self.ui.robot_base.valueChanged.connect(self.robot.info.dataChangedManually)
    self.ui.robot_id.valueChanged.connect(self.robot.info.dataChangedManually)
    self.ui.robot_balance_offset.valueChanged.connect(self.robot.info.dataChangedManually)
    self.ui.save_id_on_robot.clicked.connect(self.robot.robotIdApply)
    self.ui.robot_on_battery.clicked.connect(self.robot.info.dataChangedManually)
    self.ui.robot_battery_idle_volt.valueChanged.connect(self.robot.info.dataChangedManually)
    self.ui.pushButton_ctrl_vel.clicked.connect(self.robot.ctrlVelocity.editControlValues)
    self.ui.pushButton_ctrlTurn.clicked.connect(self.robot.ctrlTurn.editControlValues)
    self.ui.pushButton_ctrlWallVel.clicked.connect(self.robot.ctrlWallVel.editControlValues)
    self.ui.pushButton_ctrlWallTurn.clicked.connect(self.robot.ctrlWallTurn.editControlValues)
    self.ui.pushButton_ctrlPos.clicked.connect(self.robot.ctrlPos.editControlValues)
    self.ui.pushButton_ctrlEdge.clicked.connect(self.robot.ctrlEdge.editControlValues)
    self.ui.pushButton_ctrlBal.clicked.connect(self.robot.ctrlBalance.editControlValues)
    self.ui.pushButton_ctrlBalVel.clicked.connect(self.robot.ctrlBalVel.editControlValues)
    # wifi
    self.ui.wifi_apply.clicked.connect(self.robot.info.wifiSendData)
    self.ui.wifi_cancel.clicked.connect(self.robot.info.wifiCancel)
    self.ui.wifi_edit.clicked.connect(self.robot.info.wifiEdit)
    self.ui.wifi_save_MAC_list.clicked.connect(self.robot.info.wifiSaveMacList)
    self.ui.wifi_edit.setEnabled(True)
    self.ui.wifi_cancel.setEnabled(False)
    self.ui.wifi_apply.setEnabled(False)
    # servo
    self.ui.servo_edit.clicked.connect(self.robot.servo.edit)
    self.ui.servo_cancel.clicked.connect(self.robot.servo.cancelEdit)
    self.ui.servo_apply.clicked.connect(self.robot.servo.apply)
    self.ui.horizontalSlider_servo1.valueChanged.connect(self.robot.servo.servo1bar)
    self.ui.horizontalSlider_servo2.valueChanged.connect(self.robot.servo.servo2bar)
    self.ui.horizontalSlider_servo3.valueChanged.connect(self.robot.servo.servo3bar)
    self.ui.horizontalSlider_servo4.valueChanged.connect(self.robot.servo.servo4bar)
    self.ui.horizontalSlider_servo5.valueChanged.connect(self.robot.servo.servo5bar)
    self.ui.servo_value_1.valueChanged.connect(self.robot.servo.servo1num)
    self.ui.servo_value_2.valueChanged.connect(self.robot.servo.servo2num)
    self.ui.servo_value_3.valueChanged.connect(self.robot.servo.servo3num)
    self.ui.servo_value_4.valueChanged.connect(self.robot.servo.servo4num)
    self.ui.servo_value_5.valueChanged.connect(self.robot.servo.servo5num)
    self.ui.checkBox_servo1.clicked.connect(self.robot.servo.servo1num)
    self.ui.checkBox_servo2.clicked.connect(self.robot.servo.servo2num)
    self.ui.checkBox_servo3.clicked.connect(self.robot.servo.servo3num)
    self.ui.checkBox_servo4.clicked.connect(self.robot.servo.servo4num)
    self.ui.checkBox_servo5.clicked.connect(self.robot.servo.servo5num)
    print("Running ...")
    #
  def stop(self):
    print("REGBOT: Stopping\n")
    self.robot.terminate();
  def closeEvent(self, event):
    self.stop()
  def menuAbout(self):
    # QMessageBox.about (QWidget parent, QString caption, QString text)
    about_box = QtGui.QMessageBox(mymw)
    about_box.setText('''<p><span style=" font-size:20pt;">
               <a href="http://www.dtu.dk">DTU</a>
               <a href="http://www.elektro.dtu.dk"> Electro</a>
               <a href="http://rsewiki.elektro.dtu.dk/index.php/Regbot"> REGBOT<a></span></p>
               <p><span style=" font-size:10pt;">Robot used 
               in <a href="http://www.kurser.dtu.dk/31300.aspx?menulanguage=en-GB">31300</a>
               and <a href="http://www.kurser.dtu.dk/31300.aspx?menulanguage=en-GB">31301</a> Linear control 1 course.</span></p>
               <p><span style=" font-size:10pt;">This is the robot configuration GUI</span></p>
               <p><span style=" font-size:10pt;">Version ''' + self.robot.clientVersion() + ''' (''' + self.robot.clientVersionDate() + ''')</span></p>
               <p><span style=" font-size:10pt;">Last connected robot</span></p>
               <p><span style=" font-size:10pt;">''' + self.robot.info.thisRobot.name + ''' (''' + str(self.robot.info.thisRobot.robotID) + ''') version ''' + str(self.robot.info.thisRobot.version) + '''</span></p>
               <p><span style=" font-size:10pt;"><a href="http://rsewiki.elektro.dtu.dk/index.php/Regbot">Software info</a> </span></p>
               <p><span style=" font-size:10pt;">(contact: jca@elektro.dtu.dk)</span></p>''');
    about_box.setIconPixmap(QtGui.QPixmap("dtulogo_125x182.png"))
    about_box.setWindowTitle("regbot about")
    about_box.exec_()
    #QtGui.QMessageBox.about(self, 'About Message',
            #'''<p><span style=" font-size:20pt;">DTU Electro REGBOT</span></p>
               #<p><span style=" font-size:10pt;">Robot intended for 31300 and 31301 Linear control 1 course.</span></p>
               #<p><span style=" font-size:10pt;">This is the robot configuration GUI</span></p>
               #<p><span style=" font-size:10pt;">Version ''' + gg[1] + '''</span></p>
               #<p><span style=" font-size:10pt;"><a href="http://rsewiki.elektro.dtu.dk">Software info</a> </span></p>
               #<p><span style=" font-size:10pt;">(contact: jca@elektro.dtu.dk)</span></p>''')    
  #
  ### get index of tab with this preferred position (if all tabs were shown)
  def getIndex(self, tab):
    i = 0
    if (self.ui.actionDebug.isChecked()): 
      i = i + 1
    if (tab <= 1):
      return i
    if (self.ui.actionWifi.isChecked()):
      i = i + 1
    if (tab <= 2):
      return i
    if (self.ui.actionLog.isChecked()):
      i = i + 1
    if (tab <= 3):
      return i
    if (self.ui.actionRobot.isChecked()):
      i = i + 1
    if (tab <= 4):
      return i
    if (self.ui.actionIMU.isChecked()):
      i = i + 1
    if (tab <= 5):
      return i
    if (self.ui.actionLine.isChecked()):
      i = i + 1
    if (tab <= 6):
      return i
    if (self.ui.actionDistance.isChecked()):
      i = i + 1
    if (tab <= 7):
      return i
    if (self.ui.actionControl.isChecked()):
      i = i + 1
    if (tab <= 8):
      return i
    if (self.ui.actionServo.isChecked()):
      i = i + 1
    if (tab <= 9):
      return i
    # this last one is never used (for future add of tab pages)
    if (self.ui.actionMission.isChecked()):
      i = i + 1
    return i

  def menuShowMission(self):
    if (self.ui.actionMission.isChecked()):
      self.ui.tabPages.insertTab(self.getIndex(9), self.ui.tab_6, "Mission")
      self.ui.tabPages.setCurrentIndex(self.getIndex(9))
    else:
      t = self.ui.tabPages.indexOf(self.ui.tab_6)
      if t >= 0:
        self.ui.tabPages.removeTab(t)
    pass
  def menuShowServo(self):
    if (self.ui.actionServo.isChecked()):
      self.ui.tabPages.insertTab(self.getIndex(8), self.ui.tab_servo, "Servo")
      self.ui.tabPages.setCurrentIndex(self.getIndex(8))
    else:
      t = self.ui.tabPages.indexOf(self.ui.tab_servo)
      if t >= 0:
        self.ui.tabPages.removeTab(t)
    pass
  def menuShowControl(self):
    if (self.ui.actionControl.isChecked()):
      self.ui.tabPages.insertTab(self.getIndex(7), self.ui.tab_control, "Control")
      self.ui.tabPages.setCurrentIndex(self.getIndex(7))
    else:
      t = self.ui.tabPages.indexOf(self.ui.tab_control)
      if t >= 0:
        self.ui.tabPages.removeTab(t)
    pass
  def menuShowDist(self):
    if (self.ui.actionDistance.isChecked()):
      self.ui.tabPages.insertTab(self.getIndex(6), self.ui.tab_11, "IR Dist")
      self.ui.tabPages.setCurrentIndex(self.getIndex(6))
    else:
      t = self.ui.tabPages.indexOf(self.ui.tab_11)
      if t >= 0:
        self.ui.tabPages.removeTab(t)
    pass
  def menuShowLine(self):
    if (self.ui.actionLine.isChecked()):
      self.ui.tabPages.insertTab(self.getIndex(5), self.ui.tab_10, "Edge")
      self.ui.tabPages.setCurrentIndex(self.getIndex(5))
    else:
      t = self.ui.tabPages.indexOf(self.ui.tab_10)
      if t >= 0:
        self.ui.tabPages.removeTab(t)
    pass
  def menuShowIMU(self):
    if (self.ui.actionIMU.isChecked()):
      self.ui.tabPages.insertTab(self.getIndex(4), self.ui.tab_3, "IMU")
      self.ui.tabPages.setCurrentIndex(self.getIndex(4))
    else:
      t = self.ui.tabPages.indexOf(self.ui.tab_3)
      if t >= 0:
        self.ui.tabPages.removeTab(t)
    pass
  def menuShowRobot(self):
    if (self.ui.actionRobot.isChecked()):
      self.ui.tabPages.insertTab(self.getIndex(3), self.ui.tab_2, "Robot")
      self.ui.tabPages.setCurrentIndex(self.getIndex(3))
    else:
      t = self.ui.tabPages.indexOf(self.ui.tab_2)
      if t >= 0:
        self.ui.tabPages.removeTab(t)
    pass
  def menuShowLog(self):
    if (self.ui.actionLog.isChecked()):
      self.ui.tabPages.insertTab(self.getIndex(2), self.ui.tab, "Log")
      self.ui.tabPages.setCurrentIndex(self.getIndex(2))
    else:
      t = self.ui.tabPages.indexOf(self.ui.tab)
      if t >= 0:
        self.ui.tabPages.removeTab(t)
    pass
  def menuShowWiFi(self):
    if (self.ui.actionWifi.isChecked()):
      self.ui.tabPages.insertTab(self.getIndex(1), self.ui.tab_14, "Wifi")
      self.ui.tabPages.setCurrentIndex(self.getIndex(1))
    else:
      t = self.ui.tabPages.indexOf(self.ui.tab_14)
      if t >= 0:
        self.ui.tabPages.removeTab(t)
    pass
  def menuShowDebug(self):
    if (self.ui.actionDebug.isChecked()):
      self.ui.tabPages.insertTab(0, self.ui.main, "Debug")
      self.ui.tabPages.setCurrentIndex(0)
    else:
      t = self.ui.tabPages.indexOf(self.ui.main)
      if t >= 0:
        self.ui.tabPages.removeTab(t)
    pass
  def menuShowAll(self):
    if not self.ui.actionDebug.isChecked():
      self.ui.actionDebug.setChecked(True)
      self.menuShowDebug()
    if not self.ui.actionWifi.isChecked():
      self.ui.actionWifi.setChecked(True)
      self.menuShowWiFi()
    if not self.ui.actionLog.isChecked():
      self.ui.actionLog.setChecked(True)
      self.menuShowLog()
    if not self.ui.actionRobot.isChecked():
      self.ui.actionRobot.setChecked(True)
      self.menuShowRobot()
    if not self.ui.actionIMU.isChecked():
      self.ui.actionIMU.setChecked(True)
      self.menuShowIMU()
    if not self.ui.actionLine.isChecked():
      self.ui.actionLine.setChecked(True)
      self.menuShowLine()
    if not self.ui.actionDistance.isChecked():
      self.ui.actionDistance.setChecked(True)
      self.menuShowDist()
    if not self.ui.actionControl.isChecked():
      self.ui.actionControl.setChecked(True)
      self.menuShowControl()
    if not self.ui.actionServo.isChecked():
      self.ui.actionServo.setChecked(True)
      self.menuShowServo()
    if not self.ui.actionMission.isChecked():
      self.ui.actionMission.setChecked(True)
      self.menuShowMission()
    pass
  def menuHideMost(self):
    if self.ui.actionDebug.isChecked():
      self.ui.actionDebug.setChecked(False)
      self.menuShowDebug()
    if self.ui.actionWifi.isChecked():
      self.ui.actionWifi.setChecked(False)
      self.menuShowWiFi()
    if not self.ui.actionLog.isChecked():
      self.ui.actionLog.setChecked(True)
      self.menuShowLog()
    if not self.ui.actionRobot.isChecked():
      self.ui.actionRobot.setChecked(True)
      self.menuShowRobot()
    if self.ui.actionIMU.isChecked():
      self.ui.actionIMU.setChecked(False)
      self.menuShowIMU()
    if self.ui.actionLine.isChecked():
      self.ui.actionLine.setChecked(False)
      self.menuShowLine()
    if self.ui.actionDistance.isChecked():
      self.ui.actionDistance.setChecked(False)
      self.menuShowDist()
    if not self.ui.actionControl.isChecked():
      self.ui.actionControl.setChecked(True)
      self.menuShowControl()
    if self.ui.actionServo.isChecked():
      self.ui.actionServo.setChecked(False)
      self.menuShowServo()
    if not self.ui.actionMission.isChecked():
      self.ui.actionMission.setChecked(True)
      self.menuShowMission()
    pass
  # request fresh data
  def tabPageFocusChanged(self):
    # change in focus
    tab = self.ui.tabPages.currentIndex()
    if (tab == self.ui.tabPages.indexOf(self.ui.main)):
      # debug tab
      self.robot.currentTab = "debug"
    elif (tab == self.ui.tabPages.indexOf(self.ui.tab)):
      # request data from log page
      self.robot.conWrite("u3\n")
      print("# requested log data using >>u3")
      self.robot.currentTab = "log"
    elif (tab == self.ui.tabPages.indexOf(self.ui.tab_2)):
      # request data to robot tab
      self.robot.conWrite("u4\n")
      print("# requested robot data using >>u4")
      self.robot.currentTab = "robot"
    elif (tab == self.ui.tabPages.indexOf(self.ui.tab_3)):
      # IMU tab
      self.robot.conWrite("u17\n")
      print("# requested gyro offset data using >>u17")
      self.robot.currentTab = "imu"
    elif (tab == self.ui.tabPages.indexOf(self.ui.tab_6)):
      # mission
      self.robot.currentTab = "mission"
    elif (tab == self.ui.tabPages.indexOf(self.ui.tab_10)):
      # Edge tab
      self.robot.currentTab = "edge"
    elif (tab == self.ui.tabPages.indexOf(self.ui.tab_11)):
      # IR distance tab
      self.robot.currentTab = "ir"
    elif (tab == self.ui.tabPages.indexOf(self.ui.tab_control)):
      print("# requested gyro offset data using >>u17")
      self.robot.currentTab = "control"
    elif (tab == self.ui.tabPages.indexOf(self.ui.tab_14)):
      # wifi tab
      self.robot.conWrite("v1\n")
      print("# requested wifi data using >>v1")
      self.robot.currentTab = "wifi"
    elif (tab == self.ui.tabPages.indexOf(self.ui.tab_servo)):
      # wifi tab
      self.robot.conWrite("svo\n")
      print("# requested servo data using >>svo")
      self.robot.currentTab = "servo"
    else:
      self.robot.currentTab = "none"
    pass
    

#http://rsewiki.elektro.dtu.dk/index.php/Regbot
#
# Create application and main window
#
if __name__ == '__main__':
  myapp = QtGui.QApplication(sys.argv)
  #myapp = QApplication(sys.argv)
  mymw = UMainWindow()
  #robot.configurationFileLoadDef(True)
  mymw.setWindowIcon(QtGui.QIcon("dtulogoicon_123x123.png"))
  # mymw.setIcon.setIconPixmap(QtGui.QPixmap("dtulogo_125x182.png"))
  #robot.imu.initGraph()
  #robot.drive.initGraph()
  mymw.show()
  #myapp.exec()
  sys.exit(myapp.exec_())
